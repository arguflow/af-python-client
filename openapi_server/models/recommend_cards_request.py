from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class RecommendCardsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, positive_card_ids=None):  # noqa: E501
        """RecommendCardsRequest - a model defined in OpenAPI

        :param positive_card_ids: The positive_card_ids of this RecommendCardsRequest.  # noqa: E501
        :type positive_card_ids: List[str]
        """
        self.openapi_types = {
            'positive_card_ids': List[str]
        }

        self.attribute_map = {
            'positive_card_ids': 'positive_card_ids'
        }

        self._positive_card_ids = positive_card_ids

    @classmethod
    def from_dict(cls, dikt) -> 'RecommendCardsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RecommendCardsRequest of this RecommendCardsRequest.  # noqa: E501
        :rtype: RecommendCardsRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def positive_card_ids(self) -> List[str]:
        """Gets the positive_card_ids of this RecommendCardsRequest.


        :return: The positive_card_ids of this RecommendCardsRequest.
        :rtype: List[str]
        """
        return self._positive_card_ids

    @positive_card_ids.setter
    def positive_card_ids(self, positive_card_ids: List[str]):
        """Sets the positive_card_ids of this RecommendCardsRequest.


        :param positive_card_ids: The positive_card_ids of this RecommendCardsRequest.
        :type positive_card_ids: List[str]
        """
        if positive_card_ids is None:
            raise ValueError("Invalid value for `positive_card_ids`, must not be `None`")  # noqa: E501

        self._positive_card_ids = positive_card_ids
