from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchCollectionsData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_id=None, content=None, filters=None, link=None, search_type=None, tag_set=None):  # noqa: E501
        """SearchCollectionsData - a model defined in OpenAPI

        :param collection_id: The collection_id of this SearchCollectionsData.  # noqa: E501
        :type collection_id: str
        :param content: The content of this SearchCollectionsData.  # noqa: E501
        :type content: str
        :param filters: The filters of this SearchCollectionsData.  # noqa: E501
        :type filters: object
        :param link: The link of this SearchCollectionsData.  # noqa: E501
        :type link: List[str]
        :param search_type: The search_type of this SearchCollectionsData.  # noqa: E501
        :type search_type: str
        :param tag_set: The tag_set of this SearchCollectionsData.  # noqa: E501
        :type tag_set: List[str]
        """
        self.openapi_types = {
            'collection_id': str,
            'content': str,
            'filters': object,
            'link': List[str],
            'search_type': str,
            'tag_set': List[str]
        }

        self.attribute_map = {
            'collection_id': 'collection_id',
            'content': 'content',
            'filters': 'filters',
            'link': 'link',
            'search_type': 'search_type',
            'tag_set': 'tag_set'
        }

        self._collection_id = collection_id
        self._content = content
        self._filters = filters
        self._link = link
        self._search_type = search_type
        self._tag_set = tag_set

    @classmethod
    def from_dict(cls, dikt) -> 'SearchCollectionsData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SearchCollectionsData of this SearchCollectionsData.  # noqa: E501
        :rtype: SearchCollectionsData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_id(self) -> str:
        """Gets the collection_id of this SearchCollectionsData.


        :return: The collection_id of this SearchCollectionsData.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id: str):
        """Sets the collection_id of this SearchCollectionsData.


        :param collection_id: The collection_id of this SearchCollectionsData.
        :type collection_id: str
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")  # noqa: E501

        self._collection_id = collection_id

    @property
    def content(self) -> str:
        """Gets the content of this SearchCollectionsData.


        :return: The content of this SearchCollectionsData.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this SearchCollectionsData.


        :param content: The content of this SearchCollectionsData.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def filters(self) -> object:
        """Gets the filters of this SearchCollectionsData.


        :return: The filters of this SearchCollectionsData.
        :rtype: object
        """
        return self._filters

    @filters.setter
    def filters(self, filters: object):
        """Sets the filters of this SearchCollectionsData.


        :param filters: The filters of this SearchCollectionsData.
        :type filters: object
        """

        self._filters = filters

    @property
    def link(self) -> List[str]:
        """Gets the link of this SearchCollectionsData.


        :return: The link of this SearchCollectionsData.
        :rtype: List[str]
        """
        return self._link

    @link.setter
    def link(self, link: List[str]):
        """Sets the link of this SearchCollectionsData.


        :param link: The link of this SearchCollectionsData.
        :type link: List[str]
        """

        self._link = link

    @property
    def search_type(self) -> str:
        """Gets the search_type of this SearchCollectionsData.


        :return: The search_type of this SearchCollectionsData.
        :rtype: str
        """
        return self._search_type

    @search_type.setter
    def search_type(self, search_type: str):
        """Sets the search_type of this SearchCollectionsData.


        :param search_type: The search_type of this SearchCollectionsData.
        :type search_type: str
        """
        if search_type is None:
            raise ValueError("Invalid value for `search_type`, must not be `None`")  # noqa: E501

        self._search_type = search_type

    @property
    def tag_set(self) -> List[str]:
        """Gets the tag_set of this SearchCollectionsData.


        :return: The tag_set of this SearchCollectionsData.
        :rtype: List[str]
        """
        return self._tag_set

    @tag_set.setter
    def tag_set(self, tag_set: List[str]):
        """Sets the tag_set of this SearchCollectionsData.


        :param tag_set: The tag_set of this SearchCollectionsData.
        :type tag_set: List[str]
        """

        self._tag_set = tag_set
