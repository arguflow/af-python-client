from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.slim_collection import SlimCollection
from openapi_server import util

from openapi_server.models.slim_collection import SlimCollection  # noqa: E501

class BookmarkCollectionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_uuid=None, slim_collections=None):  # noqa: E501
        """BookmarkCollectionResult - a model defined in OpenAPI

        :param card_uuid: The card_uuid of this BookmarkCollectionResult.  # noqa: E501
        :type card_uuid: str
        :param slim_collections: The slim_collections of this BookmarkCollectionResult.  # noqa: E501
        :type slim_collections: List[SlimCollection]
        """
        self.openapi_types = {
            'card_uuid': str,
            'slim_collections': List[SlimCollection]
        }

        self.attribute_map = {
            'card_uuid': 'card_uuid',
            'slim_collections': 'slim_collections'
        }

        self._card_uuid = card_uuid
        self._slim_collections = slim_collections

    @classmethod
    def from_dict(cls, dikt) -> 'BookmarkCollectionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BookmarkCollectionResult of this BookmarkCollectionResult.  # noqa: E501
        :rtype: BookmarkCollectionResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_uuid(self) -> str:
        """Gets the card_uuid of this BookmarkCollectionResult.


        :return: The card_uuid of this BookmarkCollectionResult.
        :rtype: str
        """
        return self._card_uuid

    @card_uuid.setter
    def card_uuid(self, card_uuid: str):
        """Sets the card_uuid of this BookmarkCollectionResult.


        :param card_uuid: The card_uuid of this BookmarkCollectionResult.
        :type card_uuid: str
        """
        if card_uuid is None:
            raise ValueError("Invalid value for `card_uuid`, must not be `None`")  # noqa: E501

        self._card_uuid = card_uuid

    @property
    def slim_collections(self) -> List[SlimCollection]:
        """Gets the slim_collections of this BookmarkCollectionResult.


        :return: The slim_collections of this BookmarkCollectionResult.
        :rtype: List[SlimCollection]
        """
        return self._slim_collections

    @slim_collections.setter
    def slim_collections(self, slim_collections: List[SlimCollection]):
        """Sets the slim_collections of this BookmarkCollectionResult.


        :param slim_collections: The slim_collections of this BookmarkCollectionResult.
        :type slim_collections: List[SlimCollection]
        """
        if slim_collections is None:
            raise ValueError("Invalid value for `slim_collections`, must not be `None`")  # noqa: E501

        self._slim_collections = slim_collections
