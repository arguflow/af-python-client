from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UserDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at=None, email=None, id=None, organization_id=None, username=None, visible_email=None, website=None):  # noqa: E501
        """UserDTO - a model defined in OpenAPI

        :param created_at: The created_at of this UserDTO.  # noqa: E501
        :type created_at: datetime
        :param email: The email of this UserDTO.  # noqa: E501
        :type email: str
        :param id: The id of this UserDTO.  # noqa: E501
        :type id: str
        :param organization_id: The organization_id of this UserDTO.  # noqa: E501
        :type organization_id: str
        :param username: The username of this UserDTO.  # noqa: E501
        :type username: str
        :param visible_email: The visible_email of this UserDTO.  # noqa: E501
        :type visible_email: bool
        :param website: The website of this UserDTO.  # noqa: E501
        :type website: str
        """
        self.openapi_types = {
            'created_at': datetime,
            'email': str,
            'id': str,
            'organization_id': str,
            'username': str,
            'visible_email': bool,
            'website': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'email': 'email',
            'id': 'id',
            'organization_id': 'organization_id',
            'username': 'username',
            'visible_email': 'visible_email',
            'website': 'website'
        }

        self._created_at = created_at
        self._email = email
        self._id = id
        self._organization_id = organization_id
        self._username = username
        self._visible_email = visible_email
        self._website = website

    @classmethod
    def from_dict(cls, dikt) -> 'UserDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserDTO of this UserDTO.  # noqa: E501
        :rtype: UserDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this UserDTO.


        :return: The created_at of this UserDTO.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this UserDTO.


        :param created_at: The created_at of this UserDTO.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def email(self) -> str:
        """Gets the email of this UserDTO.


        :return: The email of this UserDTO.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this UserDTO.


        :param email: The email of this UserDTO.
        :type email: str
        """

        self._email = email

    @property
    def id(self) -> str:
        """Gets the id of this UserDTO.


        :return: The id of this UserDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this UserDTO.


        :param id: The id of this UserDTO.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def organization_id(self) -> str:
        """Gets the organization_id of this UserDTO.


        :return: The organization_id of this UserDTO.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id: str):
        """Sets the organization_id of this UserDTO.


        :param organization_id: The organization_id of this UserDTO.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def username(self) -> str:
        """Gets the username of this UserDTO.


        :return: The username of this UserDTO.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this UserDTO.


        :param username: The username of this UserDTO.
        :type username: str
        """

        self._username = username

    @property
    def visible_email(self) -> bool:
        """Gets the visible_email of this UserDTO.


        :return: The visible_email of this UserDTO.
        :rtype: bool
        """
        return self._visible_email

    @visible_email.setter
    def visible_email(self, visible_email: bool):
        """Sets the visible_email of this UserDTO.


        :param visible_email: The visible_email of this UserDTO.
        :type visible_email: bool
        """
        if visible_email is None:
            raise ValueError("Invalid value for `visible_email`, must not be `None`")  # noqa: E501

        self._visible_email = visible_email

    @property
    def website(self) -> str:
        """Gets the website of this UserDTO.


        :return: The website of this UserDTO.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website: str):
        """Sets the website of this UserDTO.


        :param website: The website of this UserDTO.
        :type website: str
        """

        self._website = website
