from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completion_tokens=None, content=None, created_at=None, deleted=None, id=None, prompt_tokens=None, role=None, sort_order=None, topic_id=None, updated_at=None):  # noqa: E501
        """Message - a model defined in OpenAPI

        :param completion_tokens: The completion_tokens of this Message.  # noqa: E501
        :type completion_tokens: int
        :param content: The content of this Message.  # noqa: E501
        :type content: str
        :param created_at: The created_at of this Message.  # noqa: E501
        :type created_at: datetime
        :param deleted: The deleted of this Message.  # noqa: E501
        :type deleted: bool
        :param id: The id of this Message.  # noqa: E501
        :type id: str
        :param prompt_tokens: The prompt_tokens of this Message.  # noqa: E501
        :type prompt_tokens: int
        :param role: The role of this Message.  # noqa: E501
        :type role: str
        :param sort_order: The sort_order of this Message.  # noqa: E501
        :type sort_order: int
        :param topic_id: The topic_id of this Message.  # noqa: E501
        :type topic_id: str
        :param updated_at: The updated_at of this Message.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'completion_tokens': int,
            'content': str,
            'created_at': datetime,
            'deleted': bool,
            'id': str,
            'prompt_tokens': int,
            'role': str,
            'sort_order': int,
            'topic_id': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'completion_tokens': 'completion_tokens',
            'content': 'content',
            'created_at': 'created_at',
            'deleted': 'deleted',
            'id': 'id',
            'prompt_tokens': 'prompt_tokens',
            'role': 'role',
            'sort_order': 'sort_order',
            'topic_id': 'topic_id',
            'updated_at': 'updated_at'
        }

        self._completion_tokens = completion_tokens
        self._content = content
        self._created_at = created_at
        self._deleted = deleted
        self._id = id
        self._prompt_tokens = prompt_tokens
        self._role = role
        self._sort_order = sort_order
        self._topic_id = topic_id
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message of this Message.  # noqa: E501
        :rtype: Message
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completion_tokens(self) -> int:
        """Gets the completion_tokens of this Message.


        :return: The completion_tokens of this Message.
        :rtype: int
        """
        return self._completion_tokens

    @completion_tokens.setter
    def completion_tokens(self, completion_tokens: int):
        """Sets the completion_tokens of this Message.


        :param completion_tokens: The completion_tokens of this Message.
        :type completion_tokens: int
        """

        self._completion_tokens = completion_tokens

    @property
    def content(self) -> str:
        """Gets the content of this Message.


        :return: The content of this Message.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Message.


        :param content: The content of this Message.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Message.


        :return: The created_at of this Message.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Message.


        :param created_at: The created_at of this Message.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def deleted(self) -> bool:
        """Gets the deleted of this Message.


        :return: The deleted of this Message.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted: bool):
        """Sets the deleted of this Message.


        :param deleted: The deleted of this Message.
        :type deleted: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def id(self) -> str:
        """Gets the id of this Message.


        :return: The id of this Message.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Message.


        :param id: The id of this Message.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def prompt_tokens(self) -> int:
        """Gets the prompt_tokens of this Message.


        :return: The prompt_tokens of this Message.
        :rtype: int
        """
        return self._prompt_tokens

    @prompt_tokens.setter
    def prompt_tokens(self, prompt_tokens: int):
        """Sets the prompt_tokens of this Message.


        :param prompt_tokens: The prompt_tokens of this Message.
        :type prompt_tokens: int
        """

        self._prompt_tokens = prompt_tokens

    @property
    def role(self) -> str:
        """Gets the role of this Message.


        :return: The role of this Message.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this Message.


        :param role: The role of this Message.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def sort_order(self) -> int:
        """Gets the sort_order of this Message.


        :return: The sort_order of this Message.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order: int):
        """Sets the sort_order of this Message.


        :param sort_order: The sort_order of this Message.
        :type sort_order: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")  # noqa: E501

        self._sort_order = sort_order

    @property
    def topic_id(self) -> str:
        """Gets the topic_id of this Message.


        :return: The topic_id of this Message.
        :rtype: str
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id: str):
        """Sets the topic_id of this Message.


        :param topic_id: The topic_id of this Message.
        :type topic_id: str
        """
        if topic_id is None:
            raise ValueError("Invalid value for `topic_id`, must not be `None`")  # noqa: E501

        self._topic_id = topic_id

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Message.


        :return: The updated_at of this Message.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Message.


        :param updated_at: The updated_at of this Message.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at
