from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Topic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at=None, deleted=None, id=None, normal_chat=None, resolution=None, side=None, updated_at=None, user_id=None):  # noqa: E501
        """Topic - a model defined in OpenAPI

        :param created_at: The created_at of this Topic.  # noqa: E501
        :type created_at: datetime
        :param deleted: The deleted of this Topic.  # noqa: E501
        :type deleted: bool
        :param id: The id of this Topic.  # noqa: E501
        :type id: str
        :param normal_chat: The normal_chat of this Topic.  # noqa: E501
        :type normal_chat: bool
        :param resolution: The resolution of this Topic.  # noqa: E501
        :type resolution: str
        :param side: The side of this Topic.  # noqa: E501
        :type side: bool
        :param updated_at: The updated_at of this Topic.  # noqa: E501
        :type updated_at: datetime
        :param user_id: The user_id of this Topic.  # noqa: E501
        :type user_id: str
        """
        self.openapi_types = {
            'created_at': datetime,
            'deleted': bool,
            'id': str,
            'normal_chat': bool,
            'resolution': str,
            'side': bool,
            'updated_at': datetime,
            'user_id': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'deleted': 'deleted',
            'id': 'id',
            'normal_chat': 'normal_chat',
            'resolution': 'resolution',
            'side': 'side',
            'updated_at': 'updated_at',
            'user_id': 'user_id'
        }

        self._created_at = created_at
        self._deleted = deleted
        self._id = id
        self._normal_chat = normal_chat
        self._resolution = resolution
        self._side = side
        self._updated_at = updated_at
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt) -> 'Topic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Topic of this Topic.  # noqa: E501
        :rtype: Topic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Topic.


        :return: The created_at of this Topic.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Topic.


        :param created_at: The created_at of this Topic.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def deleted(self) -> bool:
        """Gets the deleted of this Topic.


        :return: The deleted of this Topic.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted: bool):
        """Sets the deleted of this Topic.


        :param deleted: The deleted of this Topic.
        :type deleted: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def id(self) -> str:
        """Gets the id of this Topic.


        :return: The id of this Topic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Topic.


        :param id: The id of this Topic.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def normal_chat(self) -> bool:
        """Gets the normal_chat of this Topic.


        :return: The normal_chat of this Topic.
        :rtype: bool
        """
        return self._normal_chat

    @normal_chat.setter
    def normal_chat(self, normal_chat: bool):
        """Sets the normal_chat of this Topic.


        :param normal_chat: The normal_chat of this Topic.
        :type normal_chat: bool
        """
        if normal_chat is None:
            raise ValueError("Invalid value for `normal_chat`, must not be `None`")  # noqa: E501

        self._normal_chat = normal_chat

    @property
    def resolution(self) -> str:
        """Gets the resolution of this Topic.


        :return: The resolution of this Topic.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution: str):
        """Sets the resolution of this Topic.


        :param resolution: The resolution of this Topic.
        :type resolution: str
        """
        if resolution is None:
            raise ValueError("Invalid value for `resolution`, must not be `None`")  # noqa: E501

        self._resolution = resolution

    @property
    def side(self) -> bool:
        """Gets the side of this Topic.


        :return: The side of this Topic.
        :rtype: bool
        """
        return self._side

    @side.setter
    def side(self, side: bool):
        """Sets the side of this Topic.


        :param side: The side of this Topic.
        :type side: bool
        """
        if side is None:
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501

        self._side = side

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Topic.


        :return: The updated_at of this Topic.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Topic.


        :param updated_at: The updated_at of this Topic.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Topic.


        :return: The user_id of this Topic.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Topic.


        :param user_id: The user_id of this Topic.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id
