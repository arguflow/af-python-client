from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.bookmark_cards import BookmarkCards
from openapi_server.models.card_collection import CardCollection
from openapi_server import util

from openapi_server.models.bookmark_cards import BookmarkCards  # noqa: E501
from openapi_server.models.card_collection import CardCollection  # noqa: E501

class BookmarkData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bookmarks=None, collection=None, total_pages=None):  # noqa: E501
        """BookmarkData - a model defined in OpenAPI

        :param bookmarks: The bookmarks of this BookmarkData.  # noqa: E501
        :type bookmarks: List[BookmarkCards]
        :param collection: The collection of this BookmarkData.  # noqa: E501
        :type collection: CardCollection
        :param total_pages: The total_pages of this BookmarkData.  # noqa: E501
        :type total_pages: int
        """
        self.openapi_types = {
            'bookmarks': List[BookmarkCards],
            'collection': CardCollection,
            'total_pages': int
        }

        self.attribute_map = {
            'bookmarks': 'bookmarks',
            'collection': 'collection',
            'total_pages': 'total_pages'
        }

        self._bookmarks = bookmarks
        self._collection = collection
        self._total_pages = total_pages

    @classmethod
    def from_dict(cls, dikt) -> 'BookmarkData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BookmarkData of this BookmarkData.  # noqa: E501
        :rtype: BookmarkData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bookmarks(self) -> List[BookmarkCards]:
        """Gets the bookmarks of this BookmarkData.


        :return: The bookmarks of this BookmarkData.
        :rtype: List[BookmarkCards]
        """
        return self._bookmarks

    @bookmarks.setter
    def bookmarks(self, bookmarks: List[BookmarkCards]):
        """Sets the bookmarks of this BookmarkData.


        :param bookmarks: The bookmarks of this BookmarkData.
        :type bookmarks: List[BookmarkCards]
        """
        if bookmarks is None:
            raise ValueError("Invalid value for `bookmarks`, must not be `None`")  # noqa: E501

        self._bookmarks = bookmarks

    @property
    def collection(self) -> CardCollection:
        """Gets the collection of this BookmarkData.


        :return: The collection of this BookmarkData.
        :rtype: CardCollection
        """
        return self._collection

    @collection.setter
    def collection(self, collection: CardCollection):
        """Sets the collection of this BookmarkData.


        :param collection: The collection of this BookmarkData.
        :type collection: CardCollection
        """
        if collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")  # noqa: E501

        self._collection = collection

    @property
    def total_pages(self) -> int:
        """Gets the total_pages of this BookmarkData.


        :return: The total_pages of this BookmarkData.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages: int):
        """Sets the total_pages of this BookmarkData.


        :param total_pages: The total_pages of this BookmarkData.
        :type total_pages: int
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")  # noqa: E501

        self._total_pages = total_pages
