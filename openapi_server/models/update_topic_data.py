from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateTopicData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resolution=None, side=None, topic_id=None):  # noqa: E501
        """UpdateTopicData - a model defined in OpenAPI

        :param resolution: The resolution of this UpdateTopicData.  # noqa: E501
        :type resolution: str
        :param side: The side of this UpdateTopicData.  # noqa: E501
        :type side: bool
        :param topic_id: The topic_id of this UpdateTopicData.  # noqa: E501
        :type topic_id: str
        """
        self.openapi_types = {
            'resolution': str,
            'side': bool,
            'topic_id': str
        }

        self.attribute_map = {
            'resolution': 'resolution',
            'side': 'side',
            'topic_id': 'topic_id'
        }

        self._resolution = resolution
        self._side = side
        self._topic_id = topic_id

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateTopicData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateTopicData of this UpdateTopicData.  # noqa: E501
        :rtype: UpdateTopicData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resolution(self) -> str:
        """Gets the resolution of this UpdateTopicData.


        :return: The resolution of this UpdateTopicData.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution: str):
        """Sets the resolution of this UpdateTopicData.


        :param resolution: The resolution of this UpdateTopicData.
        :type resolution: str
        """
        if resolution is None:
            raise ValueError("Invalid value for `resolution`, must not be `None`")  # noqa: E501

        self._resolution = resolution

    @property
    def side(self) -> bool:
        """Gets the side of this UpdateTopicData.


        :return: The side of this UpdateTopicData.
        :rtype: bool
        """
        return self._side

    @side.setter
    def side(self, side: bool):
        """Sets the side of this UpdateTopicData.


        :param side: The side of this UpdateTopicData.
        :type side: bool
        """
        if side is None:
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501

        self._side = side

    @property
    def topic_id(self) -> str:
        """Gets the topic_id of this UpdateTopicData.


        :return: The topic_id of this UpdateTopicData.
        :rtype: str
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id: str):
        """Sets the topic_id of this UpdateTopicData.


        :param topic_id: The topic_id of this UpdateTopicData.
        :type topic_id: str
        """
        if topic_id is None:
            raise ValueError("Invalid value for `topic_id`, must not be `None`")  # noqa: E501

        self._topic_id = topic_id
