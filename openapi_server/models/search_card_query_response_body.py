from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.score_card_dto import ScoreCardDTO
from openapi_server import util

from openapi_server.models.score_card_dto import ScoreCardDTO  # noqa: E501

class SearchCardQueryResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, score_cards=None, total_card_pages=None):  # noqa: E501
        """SearchCardQueryResponseBody - a model defined in OpenAPI

        :param score_cards: The score_cards of this SearchCardQueryResponseBody.  # noqa: E501
        :type score_cards: List[ScoreCardDTO]
        :param total_card_pages: The total_card_pages of this SearchCardQueryResponseBody.  # noqa: E501
        :type total_card_pages: int
        """
        self.openapi_types = {
            'score_cards': List[ScoreCardDTO],
            'total_card_pages': int
        }

        self.attribute_map = {
            'score_cards': 'score_cards',
            'total_card_pages': 'total_card_pages'
        }

        self._score_cards = score_cards
        self._total_card_pages = total_card_pages

    @classmethod
    def from_dict(cls, dikt) -> 'SearchCardQueryResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SearchCardQueryResponseBody of this SearchCardQueryResponseBody.  # noqa: E501
        :rtype: SearchCardQueryResponseBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def score_cards(self) -> List[ScoreCardDTO]:
        """Gets the score_cards of this SearchCardQueryResponseBody.


        :return: The score_cards of this SearchCardQueryResponseBody.
        :rtype: List[ScoreCardDTO]
        """
        return self._score_cards

    @score_cards.setter
    def score_cards(self, score_cards: List[ScoreCardDTO]):
        """Sets the score_cards of this SearchCardQueryResponseBody.


        :param score_cards: The score_cards of this SearchCardQueryResponseBody.
        :type score_cards: List[ScoreCardDTO]
        """
        if score_cards is None:
            raise ValueError("Invalid value for `score_cards`, must not be `None`")  # noqa: E501

        self._score_cards = score_cards

    @property
    def total_card_pages(self) -> int:
        """Gets the total_card_pages of this SearchCardQueryResponseBody.


        :return: The total_card_pages of this SearchCardQueryResponseBody.
        :rtype: int
        """
        return self._total_card_pages

    @total_card_pages.setter
    def total_card_pages(self, total_card_pages: int):
        """Sets the total_card_pages of this SearchCardQueryResponseBody.


        :param total_card_pages: The total_card_pages of this SearchCardQueryResponseBody.
        :type total_card_pages: int
        """
        if total_card_pages is None:
            raise ValueError("Invalid value for `total_card_pages`, must not be `None`")  # noqa: E501

        self._total_card_pages = total_card_pages
