from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.card_collection_and_file import CardCollectionAndFile
from openapi_server import util

from openapi_server.models.card_collection_and_file import CardCollectionAndFile  # noqa: E501

class CollectionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collections=None, total_pages=None):  # noqa: E501
        """CollectionData - a model defined in OpenAPI

        :param collections: The collections of this CollectionData.  # noqa: E501
        :type collections: List[CardCollectionAndFile]
        :param total_pages: The total_pages of this CollectionData.  # noqa: E501
        :type total_pages: int
        """
        self.openapi_types = {
            'collections': List[CardCollectionAndFile],
            'total_pages': int
        }

        self.attribute_map = {
            'collections': 'collections',
            'total_pages': 'total_pages'
        }

        self._collections = collections
        self._total_pages = total_pages

    @classmethod
    def from_dict(cls, dikt) -> 'CollectionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CollectionData of this CollectionData.  # noqa: E501
        :rtype: CollectionData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collections(self) -> List[CardCollectionAndFile]:
        """Gets the collections of this CollectionData.


        :return: The collections of this CollectionData.
        :rtype: List[CardCollectionAndFile]
        """
        return self._collections

    @collections.setter
    def collections(self, collections: List[CardCollectionAndFile]):
        """Sets the collections of this CollectionData.


        :param collections: The collections of this CollectionData.
        :type collections: List[CardCollectionAndFile]
        """
        if collections is None:
            raise ValueError("Invalid value for `collections`, must not be `None`")  # noqa: E501

        self._collections = collections

    @property
    def total_pages(self) -> int:
        """Gets the total_pages of this CollectionData.


        :return: The total_pages of this CollectionData.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages: int):
        """Sets the total_pages of this CollectionData.


        :param total_pages: The total_pages of this CollectionData.
        :type total_pages: int
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")  # noqa: E501

        self._total_pages = total_pages
