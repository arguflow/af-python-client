from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateOffCollectionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_id=None, page=None, query=None):  # noqa: E501
        """GenerateOffCollectionData - a model defined in OpenAPI

        :param collection_id: The collection_id of this GenerateOffCollectionData.  # noqa: E501
        :type collection_id: str
        :param page: The page of this GenerateOffCollectionData.  # noqa: E501
        :type page: int
        :param query: The query of this GenerateOffCollectionData.  # noqa: E501
        :type query: str
        """
        self.openapi_types = {
            'collection_id': str,
            'page': int,
            'query': str
        }

        self.attribute_map = {
            'collection_id': 'collection_id',
            'page': 'page',
            'query': 'query'
        }

        self._collection_id = collection_id
        self._page = page
        self._query = query

    @classmethod
    def from_dict(cls, dikt) -> 'GenerateOffCollectionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GenerateOffCollectionData of this GenerateOffCollectionData.  # noqa: E501
        :rtype: GenerateOffCollectionData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_id(self) -> str:
        """Gets the collection_id of this GenerateOffCollectionData.


        :return: The collection_id of this GenerateOffCollectionData.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id: str):
        """Sets the collection_id of this GenerateOffCollectionData.


        :param collection_id: The collection_id of this GenerateOffCollectionData.
        :type collection_id: str
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")  # noqa: E501

        self._collection_id = collection_id

    @property
    def page(self) -> int:
        """Gets the page of this GenerateOffCollectionData.


        :return: The page of this GenerateOffCollectionData.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page: int):
        """Sets the page of this GenerateOffCollectionData.


        :param page: The page of this GenerateOffCollectionData.
        :type page: int
        """
        if page is not None and page < 0:  # noqa: E501
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `0`")  # noqa: E501

        self._page = page

    @property
    def query(self) -> str:
        """Gets the query of this GenerateOffCollectionData.


        :return: The query of this GenerateOffCollectionData.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query: str):
        """Sets the query of this GenerateOffCollectionData.


        :param query: The query of this GenerateOffCollectionData.
        :type query: str
        """

        self._query = query
