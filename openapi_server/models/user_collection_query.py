from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UserCollectionQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page=None, user_id=None):  # noqa: E501
        """UserCollectionQuery - a model defined in OpenAPI

        :param page: The page of this UserCollectionQuery.  # noqa: E501
        :type page: int
        :param user_id: The user_id of this UserCollectionQuery.  # noqa: E501
        :type user_id: str
        """
        self.openapi_types = {
            'page': int,
            'user_id': str
        }

        self.attribute_map = {
            'page': 'page',
            'user_id': 'user_id'
        }

        self._page = page
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt) -> 'UserCollectionQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserCollectionQuery of this UserCollectionQuery.  # noqa: E501
        :rtype: UserCollectionQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page(self) -> int:
        """Gets the page of this UserCollectionQuery.


        :return: The page of this UserCollectionQuery.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page: int):
        """Sets the page of this UserCollectionQuery.


        :param page: The page of this UserCollectionQuery.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")  # noqa: E501
        if page is not None and page < 0:  # noqa: E501
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `0`")  # noqa: E501

        self._page = page

    @property
    def user_id(self) -> str:
        """Gets the user_id of this UserCollectionQuery.


        :return: The user_id of this UserCollectionQuery.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this UserCollectionQuery.


        :param user_id: The user_id of this UserCollectionQuery.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id
