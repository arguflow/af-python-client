from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCardCollectionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, is_public=None, name=None):  # noqa: E501
        """CreateCardCollectionData - a model defined in OpenAPI

        :param description: The description of this CreateCardCollectionData.  # noqa: E501
        :type description: str
        :param is_public: The is_public of this CreateCardCollectionData.  # noqa: E501
        :type is_public: bool
        :param name: The name of this CreateCardCollectionData.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'description': str,
            'is_public': bool,
            'name': str
        }

        self.attribute_map = {
            'description': 'description',
            'is_public': 'is_public',
            'name': 'name'
        }

        self._description = description
        self._is_public = is_public
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'CreateCardCollectionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateCardCollectionData of this CreateCardCollectionData.  # noqa: E501
        :rtype: CreateCardCollectionData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this CreateCardCollectionData.


        :return: The description of this CreateCardCollectionData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CreateCardCollectionData.


        :param description: The description of this CreateCardCollectionData.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def is_public(self) -> bool:
        """Gets the is_public of this CreateCardCollectionData.


        :return: The is_public of this CreateCardCollectionData.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public: bool):
        """Sets the is_public of this CreateCardCollectionData.


        :param is_public: The is_public of this CreateCardCollectionData.
        :type is_public: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")  # noqa: E501

        self._is_public = is_public

    @property
    def name(self) -> str:
        """Gets the name of this CreateCardCollectionData.


        :return: The name of this CreateCardCollectionData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CreateCardCollectionData.


        :param name: The name of this CreateCardCollectionData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
