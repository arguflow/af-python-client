from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CardCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author_id=None, created_at=None, dataset_id=None, description=None, id=None, is_public=None, name=None, updated_at=None):  # noqa: E501
        """CardCollection - a model defined in OpenAPI

        :param author_id: The author_id of this CardCollection.  # noqa: E501
        :type author_id: str
        :param created_at: The created_at of this CardCollection.  # noqa: E501
        :type created_at: datetime
        :param dataset_id: The dataset_id of this CardCollection.  # noqa: E501
        :type dataset_id: str
        :param description: The description of this CardCollection.  # noqa: E501
        :type description: str
        :param id: The id of this CardCollection.  # noqa: E501
        :type id: str
        :param is_public: The is_public of this CardCollection.  # noqa: E501
        :type is_public: bool
        :param name: The name of this CardCollection.  # noqa: E501
        :type name: str
        :param updated_at: The updated_at of this CardCollection.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'author_id': str,
            'created_at': datetime,
            'dataset_id': str,
            'description': str,
            'id': str,
            'is_public': bool,
            'name': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'author_id': 'author_id',
            'created_at': 'created_at',
            'dataset_id': 'dataset_id',
            'description': 'description',
            'id': 'id',
            'is_public': 'is_public',
            'name': 'name',
            'updated_at': 'updated_at'
        }

        self._author_id = author_id
        self._created_at = created_at
        self._dataset_id = dataset_id
        self._description = description
        self._id = id
        self._is_public = is_public
        self._name = name
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'CardCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CardCollection of this CardCollection.  # noqa: E501
        :rtype: CardCollection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_id(self) -> str:
        """Gets the author_id of this CardCollection.


        :return: The author_id of this CardCollection.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id: str):
        """Sets the author_id of this CardCollection.


        :param author_id: The author_id of this CardCollection.
        :type author_id: str
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this CardCollection.


        :return: The created_at of this CardCollection.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this CardCollection.


        :param created_at: The created_at of this CardCollection.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def dataset_id(self) -> str:
        """Gets the dataset_id of this CardCollection.


        :return: The dataset_id of this CardCollection.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id: str):
        """Sets the dataset_id of this CardCollection.


        :param dataset_id: The dataset_id of this CardCollection.
        :type dataset_id: str
        """
        if dataset_id is None:
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def description(self) -> str:
        """Gets the description of this CardCollection.


        :return: The description of this CardCollection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CardCollection.


        :param description: The description of this CardCollection.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def id(self) -> str:
        """Gets the id of this CardCollection.


        :return: The id of this CardCollection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CardCollection.


        :param id: The id of this CardCollection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_public(self) -> bool:
        """Gets the is_public of this CardCollection.


        :return: The is_public of this CardCollection.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public: bool):
        """Sets the is_public of this CardCollection.


        :param is_public: The is_public of this CardCollection.
        :type is_public: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")  # noqa: E501

        self._is_public = is_public

    @property
    def name(self) -> str:
        """Gets the name of this CardCollection.


        :return: The name of this CardCollection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CardCollection.


        :param name: The name of this CardCollection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this CardCollection.


        :return: The updated_at of this CardCollection.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this CardCollection.


        :param updated_at: The updated_at of this CardCollection.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at
