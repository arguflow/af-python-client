from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadFileData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base64_docx_file=None, create_cards=None, description=None, file_mime_type=None, file_name=None, link=None, metadata=None, private=None, tag_set=None, time_stamp=None):  # noqa: E501
        """UploadFileData - a model defined in OpenAPI

        :param base64_docx_file: The base64_docx_file of this UploadFileData.  # noqa: E501
        :type base64_docx_file: str
        :param create_cards: The create_cards of this UploadFileData.  # noqa: E501
        :type create_cards: bool
        :param description: The description of this UploadFileData.  # noqa: E501
        :type description: str
        :param file_mime_type: The file_mime_type of this UploadFileData.  # noqa: E501
        :type file_mime_type: str
        :param file_name: The file_name of this UploadFileData.  # noqa: E501
        :type file_name: str
        :param link: The link of this UploadFileData.  # noqa: E501
        :type link: str
        :param metadata: The metadata of this UploadFileData.  # noqa: E501
        :type metadata: object
        :param private: The private of this UploadFileData.  # noqa: E501
        :type private: bool
        :param tag_set: The tag_set of this UploadFileData.  # noqa: E501
        :type tag_set: str
        :param time_stamp: The time_stamp of this UploadFileData.  # noqa: E501
        :type time_stamp: str
        """
        self.openapi_types = {
            'base64_docx_file': str,
            'create_cards': bool,
            'description': str,
            'file_mime_type': str,
            'file_name': str,
            'link': str,
            'metadata': object,
            'private': bool,
            'tag_set': str,
            'time_stamp': str
        }

        self.attribute_map = {
            'base64_docx_file': 'base64_docx_file',
            'create_cards': 'create_cards',
            'description': 'description',
            'file_mime_type': 'file_mime_type',
            'file_name': 'file_name',
            'link': 'link',
            'metadata': 'metadata',
            'private': 'private',
            'tag_set': 'tag_set',
            'time_stamp': 'time_stamp'
        }

        self._base64_docx_file = base64_docx_file
        self._create_cards = create_cards
        self._description = description
        self._file_mime_type = file_mime_type
        self._file_name = file_name
        self._link = link
        self._metadata = metadata
        self._private = private
        self._tag_set = tag_set
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt) -> 'UploadFileData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UploadFileData of this UploadFileData.  # noqa: E501
        :rtype: UploadFileData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base64_docx_file(self) -> str:
        """Gets the base64_docx_file of this UploadFileData.


        :return: The base64_docx_file of this UploadFileData.
        :rtype: str
        """
        return self._base64_docx_file

    @base64_docx_file.setter
    def base64_docx_file(self, base64_docx_file: str):
        """Sets the base64_docx_file of this UploadFileData.


        :param base64_docx_file: The base64_docx_file of this UploadFileData.
        :type base64_docx_file: str
        """
        if base64_docx_file is None:
            raise ValueError("Invalid value for `base64_docx_file`, must not be `None`")  # noqa: E501

        self._base64_docx_file = base64_docx_file

    @property
    def create_cards(self) -> bool:
        """Gets the create_cards of this UploadFileData.


        :return: The create_cards of this UploadFileData.
        :rtype: bool
        """
        return self._create_cards

    @create_cards.setter
    def create_cards(self, create_cards: bool):
        """Sets the create_cards of this UploadFileData.


        :param create_cards: The create_cards of this UploadFileData.
        :type create_cards: bool
        """

        self._create_cards = create_cards

    @property
    def description(self) -> str:
        """Gets the description of this UploadFileData.


        :return: The description of this UploadFileData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this UploadFileData.


        :param description: The description of this UploadFileData.
        :type description: str
        """

        self._description = description

    @property
    def file_mime_type(self) -> str:
        """Gets the file_mime_type of this UploadFileData.


        :return: The file_mime_type of this UploadFileData.
        :rtype: str
        """
        return self._file_mime_type

    @file_mime_type.setter
    def file_mime_type(self, file_mime_type: str):
        """Sets the file_mime_type of this UploadFileData.


        :param file_mime_type: The file_mime_type of this UploadFileData.
        :type file_mime_type: str
        """
        if file_mime_type is None:
            raise ValueError("Invalid value for `file_mime_type`, must not be `None`")  # noqa: E501

        self._file_mime_type = file_mime_type

    @property
    def file_name(self) -> str:
        """Gets the file_name of this UploadFileData.


        :return: The file_name of this UploadFileData.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name: str):
        """Sets the file_name of this UploadFileData.


        :param file_name: The file_name of this UploadFileData.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def link(self) -> str:
        """Gets the link of this UploadFileData.


        :return: The link of this UploadFileData.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link: str):
        """Sets the link of this UploadFileData.


        :param link: The link of this UploadFileData.
        :type link: str
        """

        self._link = link

    @property
    def metadata(self) -> object:
        """Gets the metadata of this UploadFileData.


        :return: The metadata of this UploadFileData.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this UploadFileData.


        :param metadata: The metadata of this UploadFileData.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def private(self) -> bool:
        """Gets the private of this UploadFileData.


        :return: The private of this UploadFileData.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private: bool):
        """Sets the private of this UploadFileData.


        :param private: The private of this UploadFileData.
        :type private: bool
        """
        if private is None:
            raise ValueError("Invalid value for `private`, must not be `None`")  # noqa: E501

        self._private = private

    @property
    def tag_set(self) -> str:
        """Gets the tag_set of this UploadFileData.


        :return: The tag_set of this UploadFileData.
        :rtype: str
        """
        return self._tag_set

    @tag_set.setter
    def tag_set(self, tag_set: str):
        """Sets the tag_set of this UploadFileData.


        :param tag_set: The tag_set of this UploadFileData.
        :type tag_set: str
        """

        self._tag_set = tag_set

    @property
    def time_stamp(self) -> str:
        """Gets the time_stamp of this UploadFileData.


        :return: The time_stamp of this UploadFileData.
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp: str):
        """Sets the time_stamp of this UploadFileData.


        :param time_stamp: The time_stamp of this UploadFileData.
        :type time_stamp: str
        """

        self._time_stamp = time_stamp
