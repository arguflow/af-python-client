from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ChatMessageProxy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content=None, name=None, role=None):  # noqa: E501
        """ChatMessageProxy - a model defined in OpenAPI

        :param content: The content of this ChatMessageProxy.  # noqa: E501
        :type content: str
        :param name: The name of this ChatMessageProxy.  # noqa: E501
        :type name: str
        :param role: The role of this ChatMessageProxy.  # noqa: E501
        :type role: str
        """
        self.openapi_types = {
            'content': str,
            'name': str,
            'role': str
        }

        self.attribute_map = {
            'content': 'content',
            'name': 'name',
            'role': 'role'
        }

        self._content = content
        self._name = name
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'ChatMessageProxy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChatMessageProxy of this ChatMessageProxy.  # noqa: E501
        :rtype: ChatMessageProxy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self) -> str:
        """Gets the content of this ChatMessageProxy.


        :return: The content of this ChatMessageProxy.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this ChatMessageProxy.


        :param content: The content of this ChatMessageProxy.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def name(self) -> str:
        """Gets the name of this ChatMessageProxy.


        :return: The name of this ChatMessageProxy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ChatMessageProxy.


        :param name: The name of this ChatMessageProxy.
        :type name: str
        """

        self._name = name

    @property
    def role(self) -> str:
        """Gets the role of this ChatMessageProxy.


        :return: The role of this ChatMessageProxy.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this ChatMessageProxy.


        :param role: The role of this ChatMessageProxy.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role
