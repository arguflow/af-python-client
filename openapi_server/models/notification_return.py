from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.notification import Notification
from openapi_server import util

from openapi_server.models.notification import Notification  # noqa: E501

class NotificationReturn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_count=None, notifications=None, total_pages=None):  # noqa: E501
        """NotificationReturn - a model defined in OpenAPI

        :param full_count: The full_count of this NotificationReturn.  # noqa: E501
        :type full_count: int
        :param notifications: The notifications of this NotificationReturn.  # noqa: E501
        :type notifications: List[Notification]
        :param total_pages: The total_pages of this NotificationReturn.  # noqa: E501
        :type total_pages: int
        """
        self.openapi_types = {
            'full_count': int,
            'notifications': List[Notification],
            'total_pages': int
        }

        self.attribute_map = {
            'full_count': 'full_count',
            'notifications': 'notifications',
            'total_pages': 'total_pages'
        }

        self._full_count = full_count
        self._notifications = notifications
        self._total_pages = total_pages

    @classmethod
    def from_dict(cls, dikt) -> 'NotificationReturn':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NotificationReturn of this NotificationReturn.  # noqa: E501
        :rtype: NotificationReturn
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_count(self) -> int:
        """Gets the full_count of this NotificationReturn.


        :return: The full_count of this NotificationReturn.
        :rtype: int
        """
        return self._full_count

    @full_count.setter
    def full_count(self, full_count: int):
        """Sets the full_count of this NotificationReturn.


        :param full_count: The full_count of this NotificationReturn.
        :type full_count: int
        """
        if full_count is None:
            raise ValueError("Invalid value for `full_count`, must not be `None`")  # noqa: E501

        self._full_count = full_count

    @property
    def notifications(self) -> List[Notification]:
        """Gets the notifications of this NotificationReturn.


        :return: The notifications of this NotificationReturn.
        :rtype: List[Notification]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications: List[Notification]):
        """Sets the notifications of this NotificationReturn.


        :param notifications: The notifications of this NotificationReturn.
        :type notifications: List[Notification]
        """
        if notifications is None:
            raise ValueError("Invalid value for `notifications`, must not be `None`")  # noqa: E501

        self._notifications = notifications

    @property
    def total_pages(self) -> int:
        """Gets the total_pages of this NotificationReturn.


        :return: The total_pages of this NotificationReturn.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages: int):
        """Sets the total_pages of this NotificationReturn.


        :param total_pages: The total_pages of this NotificationReturn.
        :type total_pages: int
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")  # noqa: E501

        self._total_pages = total_pages
