from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SlimCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author_id=None, id=None, name=None, of_current_user=None):  # noqa: E501
        """SlimCollection - a model defined in OpenAPI

        :param author_id: The author_id of this SlimCollection.  # noqa: E501
        :type author_id: str
        :param id: The id of this SlimCollection.  # noqa: E501
        :type id: str
        :param name: The name of this SlimCollection.  # noqa: E501
        :type name: str
        :param of_current_user: The of_current_user of this SlimCollection.  # noqa: E501
        :type of_current_user: bool
        """
        self.openapi_types = {
            'author_id': str,
            'id': str,
            'name': str,
            'of_current_user': bool
        }

        self.attribute_map = {
            'author_id': 'author_id',
            'id': 'id',
            'name': 'name',
            'of_current_user': 'of_current_user'
        }

        self._author_id = author_id
        self._id = id
        self._name = name
        self._of_current_user = of_current_user

    @classmethod
    def from_dict(cls, dikt) -> 'SlimCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SlimCollection of this SlimCollection.  # noqa: E501
        :rtype: SlimCollection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_id(self) -> str:
        """Gets the author_id of this SlimCollection.


        :return: The author_id of this SlimCollection.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id: str):
        """Sets the author_id of this SlimCollection.


        :param author_id: The author_id of this SlimCollection.
        :type author_id: str
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def id(self) -> str:
        """Gets the id of this SlimCollection.


        :return: The id of this SlimCollection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SlimCollection.


        :param id: The id of this SlimCollection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this SlimCollection.


        :return: The name of this SlimCollection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SlimCollection.


        :param name: The name of this SlimCollection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def of_current_user(self) -> bool:
        """Gets the of_current_user of this SlimCollection.


        :return: The of_current_user of this SlimCollection.
        :rtype: bool
        """
        return self._of_current_user

    @of_current_user.setter
    def of_current_user(self, of_current_user: bool):
        """Sets the of_current_user of this SlimCollection.


        :param of_current_user: The of_current_user of this SlimCollection.
        :type of_current_user: bool
        """
        if of_current_user is None:
            raise ValueError("Invalid value for `of_current_user`, must not be `None`")  # noqa: E501

        self._of_current_user = of_current_user
