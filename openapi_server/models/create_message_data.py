from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateMessageData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_message_content=None, topic_id=None):  # noqa: E501
        """CreateMessageData - a model defined in OpenAPI

        :param new_message_content: The new_message_content of this CreateMessageData.  # noqa: E501
        :type new_message_content: str
        :param topic_id: The topic_id of this CreateMessageData.  # noqa: E501
        :type topic_id: str
        """
        self.openapi_types = {
            'new_message_content': str,
            'topic_id': str
        }

        self.attribute_map = {
            'new_message_content': 'new_message_content',
            'topic_id': 'topic_id'
        }

        self._new_message_content = new_message_content
        self._topic_id = topic_id

    @classmethod
    def from_dict(cls, dikt) -> 'CreateMessageData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateMessageData of this CreateMessageData.  # noqa: E501
        :rtype: CreateMessageData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_message_content(self) -> str:
        """Gets the new_message_content of this CreateMessageData.


        :return: The new_message_content of this CreateMessageData.
        :rtype: str
        """
        return self._new_message_content

    @new_message_content.setter
    def new_message_content(self, new_message_content: str):
        """Sets the new_message_content of this CreateMessageData.


        :param new_message_content: The new_message_content of this CreateMessageData.
        :type new_message_content: str
        """
        if new_message_content is None:
            raise ValueError("Invalid value for `new_message_content`, must not be `None`")  # noqa: E501

        self._new_message_content = new_message_content

    @property
    def topic_id(self) -> str:
        """Gets the topic_id of this CreateMessageData.


        :return: The topic_id of this CreateMessageData.
        :rtype: str
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id: str):
        """Sets the topic_id of this CreateMessageData.


        :param topic_id: The topic_id of this CreateMessageData.
        :type topic_id: str
        """
        if topic_id is None:
            raise ValueError("Invalid value for `topic_id`, must not be `None`")  # noqa: E501

        self._topic_id = topic_id
