from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration=None, created_at=None, id=None, name=None, registerable=None, updated_at=None):  # noqa: E501
        """Organization - a model defined in OpenAPI

        :param configuration: The configuration of this Organization.  # noqa: E501
        :type configuration: object
        :param created_at: The created_at of this Organization.  # noqa: E501
        :type created_at: datetime
        :param id: The id of this Organization.  # noqa: E501
        :type id: str
        :param name: The name of this Organization.  # noqa: E501
        :type name: str
        :param registerable: The registerable of this Organization.  # noqa: E501
        :type registerable: bool
        :param updated_at: The updated_at of this Organization.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'configuration': object,
            'created_at': datetime,
            'id': str,
            'name': str,
            'registerable': bool,
            'updated_at': datetime
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'created_at': 'created_at',
            'id': 'id',
            'name': 'name',
            'registerable': 'registerable',
            'updated_at': 'updated_at'
        }

        self._configuration = configuration
        self._created_at = created_at
        self._id = id
        self._name = name
        self._registerable = registerable
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Organization of this Organization.  # noqa: E501
        :rtype: Organization
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self) -> object:
        """Gets the configuration of this Organization.


        :return: The configuration of this Organization.
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration: object):
        """Sets the configuration of this Organization.


        :param configuration: The configuration of this Organization.
        :type configuration: object
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")  # noqa: E501

        self._configuration = configuration

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Organization.


        :return: The created_at of this Organization.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Organization.


        :param created_at: The created_at of this Organization.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def id(self) -> str:
        """Gets the id of this Organization.


        :return: The id of this Organization.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Organization.


        :param id: The id of this Organization.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Organization.


        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Organization.


        :param name: The name of this Organization.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def registerable(self) -> bool:
        """Gets the registerable of this Organization.


        :return: The registerable of this Organization.
        :rtype: bool
        """
        return self._registerable

    @registerable.setter
    def registerable(self, registerable: bool):
        """Sets the registerable of this Organization.


        :param registerable: The registerable of this Organization.
        :type registerable: bool
        """

        self._registerable = registerable

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Organization.


        :return: The updated_at of this Organization.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Organization.


        :param updated_at: The updated_at of this Organization.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at
